---
openapi: 3.0.1
info:
  title: Collaborate Api
  description: "The Collaborate Services API is a RESTful API that supports CRUD and
    processing operations required for managing entities related to the HTML sessions
    scheduling.\n\n# API versioning\n\nThe API is versioned via URL before a resource;
    \ e.g. /v1/sessions.\n\nNew releases of the API that are backwards compatible
    do not result in version increment. Examples of a backwards compatible change:\n-
    Adding new resource with previously unavailable identifiers.\n- Adding new methods
    for existing resource identifiers.\n- Changing resource identifiers and using
    endpoint redirection to direct legacy consumers.\n\n# Errors\n\nIf something fails
    the CSA responds with an appropriate HTTP response code and error JSON entity.\n\n<table
    \ border=\"1\" >  <tbody>    <tr><td width=\"20%\" style=\"padding-left: 4px\"><strong>Error
    code</strong></td><td width=\"20%\" style=\"padding-left: 4px\"><strong>Error
    key</strong></td><td width=\"60%\" style=\"padding-left: 4px\"><strong>Description</strong></td></tr>
    \   <tr><td style=\"padding-left: 4px\">400</td><td style=\"padding-left: 4px\">invalid_json</td><td
    style=\"padding-left: 4px\">The json was invalid.</td></tr>    <tr><td style=\"padding-left:
    4px\">400</td><td style=\"padding-left: 4px\">bad_request</td><td style=\"padding-left:
    4px\">The request was invalid.</td></tr>    <tr><td style=\"padding-left: 4px\">401</td><td
    style=\"padding-left: 4px\">unauthorized</td><td style=\"padding-left: 4px\">Authentication
    credential was missing or incorrect.</td></tr>    <tr><td style=\"padding-left:
    4px\">403</td><td style=\"padding-left: 4px\">forbidden</td><td style=\"padding-left:
    4px\">You don't have permission to access this resource.</td></tr>    <tr><td
    style=\"padding-left: 4px\">404</td><td style=\"padding-left: 4px\">resource_not_found</td><td
    style=\"padding-left: 4px\">You don't have read access to this resource or the
    resource does not exist.</td></tr>    <tr><td style=\"padding-left: 4px\">405</td><td
    style=\"padding-left: 4px\">method_not_allowed</td><td style=\"padding-left: 4px\">The
    request is not valid.</td></tr>    <tr><td style=\"padding-left: 4px\">409</td><td
    style=\"padding-left: 4px\">already_exist</td><td style=\"padding-left: 4px\">The
    specified object already exists.</td></tr>    <tr><td style=\"padding-left: 4px\">422</td><td
    style=\"padding-left: 4px\">unprocessable_entity</td><td style=\"padding-left:
    4px\">The request was syntactically correct, but the payload couldn't be processed.</td></tr>
    \   <tr><td style=\"padding-left: 4px\">500</td><td style=\"padding-left: 4px\">internal_error</td><td
    style=\"padding-left: 4px\">Something seems to be broken on our side. Can you
    please contact Technical Support.</td></tr>  </tbody></table>\n\n\nExample : \n\n
    \   {\n      \"errorKey\": \"internal_error\",\n      \"errorMessage\": \"Something
    seems to be broken on our side. Can you please contact Technical Support.\"\n
    \   }"
  version: '1.0'
paths:
  "/asr/{recordingUid}":
    put:
      operationId: updateStatus_1
      parameters:
      - name: recordingUid
        in: path
        required: true
        schema:
          type: string
      - name: status
        in: query
        required: true
        schema:
          type: string
          enum:
          - NONE
          - REQUESTED
          - FINISHED_OK
          - FINISHED_ERROR
          - ERROR_ACKNOWLEDGED
      - name: responseStatus
        in: query
        schema:
          type: string
      - name: errorReason
        in: query
        schema:
          type: string
      - name: errorDesc
        in: query
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: run_1
      parameters:
      - name: recordingUid
        in: path
        required: true
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
          default: eng
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/asr":
    get:
      operationId: getList_1
      parameters:
      - name: status
        in: query
        schema:
          type: string
          default: requested
          enum:
          - NONE
          - REQUESTED
          - FINISHED_OK
          - FINISHED_ERROR
          - ERROR_ACKNOWLEDGED
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 10
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/assets/{ticket}":
    get:
      operationId: getAsset_1
      parameters:
      - name: ticket
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            "*/*": {}
  "/assets/guest/{ticket}":
    get:
      operationId: getGuestAsset_1
      parameters:
      - name: ticket
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/assets/invite/{ticket}":
    get:
      operationId: getInviteAsset_1
      parameters:
      - name: ticket
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/assets/{ticket}/url":
    get:
      operationId: verifyAsset_1
      parameters:
      - name: ticket
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/assets/recording/{ticket}":
    get:
      operationId: getRecordingPermanentUrl_1
      parameters:
      - name: ticket
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/assets/launch/recording/{uid}":
    get:
      operationId: launchFromRecordingEmail_1
      parameters:
      - name: uid
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/attendance/instances/{instanceId}":
    get:
      operationId: getSessionInstance_2
      parameters:
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: expand
        in: query
        schema:
          type: array
          items:
            type: string
            enum:
            - attendees
            - attendeesCount
            - poll
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/attendance/instances/{instanceId}/attendees":
    get:
      operationId: getSessionInstanceAttendanceCsv
      parameters:
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: timeZone
        in: query
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: userId
        in: query
        schema:
          type: string
      - name: extUserId
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            text/csv; qs=0.7: {}
  "/attendance/instances":
    get:
      operationId: getSessionInstances_2
      parameters:
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: startTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: endTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: expand
        in: query
        schema:
          type: array
          items:
            type: string
            enum:
            - attendees
            - attendeesCount
            - poll
      - name: running
        in: query
        schema:
          type: boolean
      - name: name
        in: query
        schema:
          type: string
      - name: loginGroupId
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/token":
    post:
      tags:
      - oauth
      summary: Request Token.
      description: |-
        <p>Authenticates with the CSA service using the OAuth credentials. The response contains an OAuth 2 access token, that shall be used for further CSA REST API calls.</p><p>In order to authenticate, you need to create a JWT token (<a href="https://tools.ietf.org/html/rfc7519">RFC-7519</a>). Please see the following sections for details.</p><h3>JWT Payload</h3><p>The JWT payload has the following structure:</p><pre>{
          "iss": "client_key",
          "exp": 1516239022,
          "integration": {
             "siteId": "123e4567-e89b-12d3-a456-426655440000",
             "action": "VERIFY",
             "force": false,
             "lmsRegion": "us-east-1"
          }
        }
        </pre></br><p><strong><tt>iss</tt>:</strong> The issuer must be the OAuth client_id</p><p><strong><tt>exp</tt>:</strong> The validity is an optional field. If present, the response token's expiration time will be set to this value. The time is expressed as the number of seconds from 1970-01-01T0:0:0Z measured in UTC.   The server default is used if the value is not present in the payload.</p><p><strong><tt>integration</tt>:</strong> The integration object is optional (unless the siteId has been registered, see details below). It carries additional information about the service (LMS) integrating the collaborate.   Beware that opting out the integration data from the JWT payload will prevent some Collaborate features, such as LMS attendance reporting, from being available.</p><div style="padding-left: 2em;"><p><strong><tt>siteId</tt>:</strong> a UUID assigned to the LMS. On REGISTER action (see below), the passed siteId is associated with the given OAuth consumer account. Once the site ID is assigned, the JWT payload <i>must always</i>   contain the siteId in the payload, and the site ID must match the one registered. In case of a siteId mismatch, the API will return <tt>403 FORBIDDEN</tt> with <tt>"error_key": "site_id_mismatch"</tt>.</p><p><strong><tt>action</tt>:</strong> is one of <tt>[VERIFY,REGISTER,CLEAR]</tt>.  <ul>    <li><i>VERIFY</i> - <i>default</i>. Simply verifies, that the site ID in the JWT payload and the one registered in the Collaborate match. The verification also passes if the site ID is missing (empty) in both JWT and Collaborate.</li>    <li><i>REGISTER</i> - used to register the passed <tt>siteId</tt> and <tt>lmsRegion</tt> values with the Collaborate. The registration passes in case the Site ID is not yet stored in Collaborate, or if the passed site ID and the one stored match.                          An existing siteID for the given account may be overwritten by passing <tt>force</tt> flag set to <tt>true</tt>. Change of a site ID should however never happen for any production LMS, and it may only be required                          if the OAuth Consumer credentials are shared. Sharing the credentials is <i>highly</i> discouraged, as it may break features that need to report back to the LMS based on the site ID stored. The implementors of the API                          should make sure that the site ID overwrite is properly explained to end users, and avoided unless absolutely required.</li>    <li><i>CLEAR</i> - clears the integration data stored in the Collaborate. NB: the site ID match of the data in the JWT payload and the Collaborate internals is performed even for the CLEAR action, unless the <tt>force</tt> flag is set to <tt>true</tt>.</li>  </ul>  <p><strong><tt>force</tt>:</strong> used to enforce the <tt>REGISTER</tt> and <tt>CLEAR</tt> actions even if the site IDs in the payload and Collaborate internals do not match.</p>  <p><strong><tt>lmsRegion</tt>:</strong> the AWS cloud region assigned to the LMS. Only required for the <tt>REGISTER</tt> action. Passing invalid lsmRegion or opting it out from the registration may prevent some of the Collaborate features to be available.</p></div><h3>Signing</h3><p>To authenticate, create a JWT token with the above described payload (<a href="https://tools.ietf.org/html/rfc7519">RFC-7519</a>), and sign it with your consumer secret using RSA SHA256.</p><p><strong></strong> The JWT must conform with the general format rules specified here: http://tools.ietf.org/html/draft-jones-json-web-token.</p>
      operationId: authorize_2
      parameters:
      - name: grant_type
        in: header
        description: Must be <tt>urn:ietf:params:oauth:grant-type:jwt-bearer</tt>
        required: true
        schema:
          type: string
        example: urn:ietf:params:oauth:grant-type:jwt-bearer
      - name: assertion
        in: header
        description: The JWT bearer token. See the main description for details on
          how to construct and sign the token.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  access_token: string
                  expires_in: 0
        '400':
          description: Invalid grant request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '401':
          description: Invalid client credentials.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/contexts":
    get:
      tags:
      - contexts
      summary: Search for contexts constrained by the provided attributes. The response
        contains list of Context Response objects.
      operationId: getContexts_1
      parameters:
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: name
        in: query
        description: The name of the context set during creation. The search is case
          insensitive.
        schema:
          type: string
      - name: extId
        in: query
        description: External id set during the context creation.
        schema:
          type: string
      - name: sort
        in: query
        description: List of fields for results sorting.
        schema:
          type: array
          items:
            type: string
            default: id
            enum:
            - id
            - name
      - name: limit
        in: query
        description: Maximum number of returned results (if the limit is <= 0 or >
          1000, it will default to 1000).
        schema:
          maximum: 1000
          minimum: 0
          type: integer
          format: int32
          default: 1000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchResponse"
      security:
      - JwtTokenAuth: []
    post:
      tags:
      - contexts
      summary: Creates a new context and returns it.
      operationId: postContexts_1
      requestBody:
        description: Context request body
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Context"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Context"
      security:
      - JwtTokenAuth: []
  "/contexts/{contextId}":
    get:
      tags:
      - contexts
      summary: Get the Context by contextId.
      operationId: getContextByContextId_1
      parameters:
      - name: contextId
        in: path
        description: Context's id.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Context"
        '404':
          description: The context wasn't found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      security:
      - JwtTokenAuth: []
    patch:
      tags:
      - contexts
      summary: Patch the Context by contextId with new values.
      operationId: patchContextByContextId_1
      parameters:
      - name: contextId
        in: path
        description: Context's id.
        required: true
        schema:
          type: string
      requestBody:
        description: Context Patch
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContextPatch"
          application/merge-patch+json:
            schema:
              "$ref": "#/components/schemas/ContextPatch"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Context"
        '404':
          description: The context wasn't found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      security:
      - JwtTokenAuth: []
  "/contexts/{contextId}/sessions":
    post:
      tags:
      - contexts
      summary: Associates a session with this context.
      operationId: postContextsByContextIdSessions_1
      parameters:
      - name: contextId
        in: path
        description: Context's id.
        required: true
        schema:
          type: string
      requestBody:
        description: Request body with session's id.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Id"
        required: true
      responses:
        '200':
          description: The session was associated to the context.
        '404':
          description: The context wasn't found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      security:
      - JwtTokenAuth: []
  "/email/recordings":
    post:
      operationId: sendRecordingCreationEmail_1
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            "*/*": {}
  "/email/sessions/{sessionId}/enrollments/{enrollmentId}":
    post:
      operationId: sendInvitationEmail_1
      parameters:
      - name: enrollmentId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/email/sessions/{sessionId}/enrollments":
    post:
      operationId: sendGroupInvitationEmail_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/email/sessions/{sessionId}/creation":
    post:
      operationId: sendCreationEmail_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/logingroups/{logingroupId}":
    get:
      operationId: getLogingroupsByLogingroupId_1
      parameters:
      - name: logingroupId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: putLogingroupsByLogingroupId_1
      parameters:
      - name: logingroupId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginGroupDto"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteLogingroupsByLogingroupId_1
      parameters:
      - name: logingroupId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    patch:
      operationId: patchLogingroupsByLogingroupId_1
      parameters:
      - name: logingroupId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/merge-patch+json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/logingroups/{logingroupId}/oauthconsumers":
    post:
      operationId: postLogingroupsByLogingroupIdOauthconsumers_1
      parameters:
      - name: logingroupId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OAuthConsumerDto"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/logingroups":
    get:
      operationId: getLogingroups_1
      parameters:
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: search
        in: query
        schema:
          type: string
      - name: active
        in: query
        schema:
          type: boolean
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: search_by
        in: query
        schema:
          type: array
          items:
            type: string
            enum:
            - name
            - description
            - salesforceid
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: postLogingroups_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginGroupDto"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/lti":
    post:
      operationId: authorize
      responses:
        default:
          description: default response
          content:
            application/json: {}
            text/html: {}
  "/lti/deeplinks":
    post:
      operationId: getDeepLinkResponse_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/migration":
    get:
      operationId: result_1
      parameters:
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: migrate_1
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/migration/status":
    get:
      operationId: status_1
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/oauthconsumers":
    get:
      operationId: getOauthConsumers_1
      parameters:
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: search
        in: query
        schema:
          type: string
      - name: type
        in: query
        schema:
          type: string
      - name: logingroupid
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 100
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: postOauthConsumers_1
      parameters:
      - name: expand
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/oauthconsumers/{oauthConsumerId}":
    get:
      operationId: getOauthConsumersByOauthConsumerId_1
      parameters:
      - name: oauthConsumerId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: putOauthConsumersByOauthConsumerId_1
      parameters:
      - name: oauthConsumerId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteOauthConsumersByOauthConsumerId_1
      parameters:
      - name: oauthConsumerId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
    patch:
      operationId: patchOauthConsumersByOauthConsumerId_1
      parameters:
      - name: oauthConsumerId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
          application/merge-patch+json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/oauthconsumers/me":
    get:
      operationId: getMeInformation_2
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/passwords":
    put:
      operationId: resetPassword_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PasswordResetStep2Dto"
      responses:
        default:
          description: default response
          content:
            "*/*": {}
    post:
      operationId: resetRequest_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PasswordResetStep1Dto"
      responses:
        default:
          description: default response
          content:
            "*/*": {}
  "/pins":
    get:
      operationId: getPinBySessionUID_1
      parameters:
      - name: sessionId
        in: query
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: postPin_1
      parameters:
      - name: sessionId
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/pins/{pin}":
    get:
      operationId: getPinByPin_1
      parameters:
      - name: pin
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/ping":
    get:
      operationId: ping_1
      responses:
        default:
          description: default response
          content:
            "*/*": {}
  "/recordings":
    get:
      operationId: getRecordings_1
      parameters:
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: name
        in: query
        schema:
          type: string
      - name: startTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: endTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: active
        in: query
        schema:
          type: boolean
          default: true
      - name: userId
        in: query
        schema:
          type: string
      - name: userExtId
        in: query
        schema:
          type: string
      - name: contextId
        in: query
        schema:
          type: string
      - name: contextExtId
        in: query
        schema:
          type: string
      - name: sessionId
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: postRecording_1
      parameters:
      - name: sessionInstanceId
        in: query
        schema:
          type: integer
          format: int64
      - name: recordingGroupId
        in: query
        schema:
          type: integer
          format: int64
      - name: storageUrl
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/{recordingId}/subtitle":
    get:
      operationId: getRecordingSubtitle_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      - name: origin
        in: query
        schema:
          type: string
          default: USER
          enum:
          - USER
          - EMBEDDED
          - ASR
      - name: track
        in: query
        schema:
          type: integer
          format: int64
          default: 0
      - name: lang
        in: query
        schema:
          type: string
          default: eng
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            text/vtt;charset=utf-8: {}
            text/plain;charset=utf-8: {}
    delete:
      operationId: deleteRecordingSubtitle_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      - name: origin
        in: query
        schema:
          type: string
          default: USER
          enum:
          - USER
          - EMBEDDED
          - ASR
      - name: track
        in: query
        schema:
          type: integer
          format: int64
          default: 0
      - name: lang
        in: query
        schema:
          type: string
          default: eng
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json;charset=utf-8: {}
  "/recordings/{recordingId}/subtitle/info":
    get:
      operationId: getRecordingSubtitleInfo_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      - name: track
        in: query
        schema:
          type: integer
          format: int64
          default: 0
      - name: lang
        in: query
        schema:
          type: string
          default: eng
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json;charset=utf-8: {}
  "/recordings/{recordingId}/subtitles":
    post:
      operationId: postRecordingSubtitles_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      - name: validOnly
        in: query
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json;charset=utf-8: {}
    patch:
      operationId: updateRecordingSubtitles_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/{recordingId}/subtitles/origin":
    get:
      operationId: getRecordingPreferredSubtitles_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    patch:
      operationId: updateRecordingPreferredSubtitles_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/{recordingId}":
    get:
      operationId: getRecordingsByRecordingId_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: putRecordingByRecordingId_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteRecordingsByRecordingId_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            "*/*": {}
    patch:
      operationId: patchRecordingsByRecordingId_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
          application/merge-patch+json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/list":
    get:
      operationId: getRecordingsByRecordingIds_1
      parameters:
      - name: id
        in: query
        schema:
          type: array
          items:
            type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/{recordingId}/url":
    get:
      operationId: getRecordingUrlByRecordingId_2
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      - name: validHours
        in: query
        schema:
          type: integer
          format: int32
          default: 2
      - name: validMinutes
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      - name: disposition
        in: query
        schema:
          type: string
          default: launch
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: getRecordingUrlByRecordingId
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      - name: disposition
        in: query
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/sns/stop":
    post:
      operationId: postStopEventFromSns_1
      requestBody:
        content:
          text/plain:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json;charset=utf-8: {}
            text/plain: {}
  "/recordings/sns/done":
    post:
      operationId: postDoneEventFromSns_1
      requestBody:
        content:
          text/plain:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json;charset=utf-8: {}
            text/plain: {}
  "/recordings/{recordingId}/data":
    get:
      operationId: getRecordingDataByRecordingId_1
      parameters:
      - name: User-Agent
        in: header
        schema:
          type: string
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/{recordingId}/data/secure":
    get:
      operationId: getRecordingDataByRecordingId_2
      parameters:
      - name: User-Agent
        in: header
        schema:
          type: string
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/{recordingId}/chat":
    get:
      operationId: getRecordingChatTranscriptById_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      - name: format
        in: query
        schema:
          type: string
          default: vtt
          enum:
          - VTT
          - SRT
          - TXT
          - JSON
      responses:
        default:
          description: default response
          content:
            application/json;charset=utf-8: {}
            text/vtt;charset=utf-8: {}
  "/recordings/token/{token}/data":
    get:
      operationId: getRecordingDataByToken_1
      parameters:
      - name: User-Agent
        in: header
        schema:
          type: string
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/recordings/{recordingId}/subtitle/all":
    get:
      operationId: getRecordingSubtitleAll_1
      parameters:
      - name: recordingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json;charset=utf-8: {}
  "/sessions/{sessionId}/instances/{instanceId}":
    get:
      operationId: getSessionInstance
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: expand
        in: query
        schema:
          type: array
          items:
            type: string
            enum:
            - attendees
            - attendeesCount
            - poll
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions":
    get:
      operationId: getSessions_1
      parameters:
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: name
        in: query
        schema:
          type: string
      - name: startTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: endTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: active
        in: query
        schema:
          type: boolean
          default: true
      - name: extId
        in: query
        schema:
          type: string
      - name: userId
        in: query
        schema:
          type: string
      - name: userExtId
        in: query
        schema:
          type: string
      - name: contextId
        in: query
        schema:
          type: string
      - name: contextExtId
        in: query
        schema:
          type: string
      - name: loginGroupId
        in: query
        schema:
          type: string
      - name: sessionCategory
        in: query
        schema:
          type: array
          items:
            type: string
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 10000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: postSessions_1
      parameters:
      - name: User-Agent
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}":
    get:
      operationId: getSessionsBySessionId_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: putSessionsBySessionId_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteSessionsBySessionId_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    patch:
      operationId: patchSessionsBySessionId_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
          application/merge-patch+json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/instances/{instanceId}/attendees":
    get:
      operationId: getSessionInstanceAttendanceCsv_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: timeZone
        in: query
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: userId
        in: query
        schema:
          type: string
      - name: extUserId
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            text/csv; qs=0.7: {}
  "/sessions/{sessionId}/instances/{instanceId}/stats":
    get:
      operationId: getSessionInstanceAttendanceStats_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/url":
    get:
      operationId: launchLtiSessionAndEnroll_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: launchSessionAndEnroll_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/mobileUrl":
    post:
      operationId: launchSessionForMobileAndEnroll_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/occurrences/{occurrenceId}":
    get:
      operationId: getOccurrenceForSession_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: occurrenceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: updatePutOccurrenceForSession_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: occurrenceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteOccurrenceForSession_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: occurrenceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    patch:
      operationId: updatePatchOccurrenceForSession_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: occurrenceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
          application/merge-patch+json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/enrollments":
    get:
      operationId: getSessionsBySessionIdEnrollment_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      - name: offset
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: postSessionsBySessionIdEnrollments_1
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/enrollments/{enrollmentId}":
    get:
      operationId: getSessionsBySessionIdEnrollmentsByEnrollmentId_1
      parameters:
      - name: enrollmentId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: putSessionsBySessionIdEnrollmentsByEnrollmentId_1
      parameters:
      - name: enrollmentId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteSessionsBySessionIdEnrollmentsByEnrollmentId_1
      parameters:
      - name: enrollmentId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    patch:
      operationId: patchSessionsBySessionIdEnrollmentsByEnrollmentId_1
      parameters:
      - name: enrollmentId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
          application/merge-patch+json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/enrollments/{enrollmentId}/url":
    get:
      operationId: getLaunchUrlForEnrollment_1
      parameters:
      - name: enrollmentId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/enrollments/{enrollmentId}/mobileUrl":
    get:
      operationId: getLaunchTokenForEnrollment_1
      parameters:
      - name: enrollmentId
        in: path
        required: true
        schema:
          type: string
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/sessions/{sessionId}/instances":
    get:
      operationId: getSessionInstances
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: startTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: endTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: expand
        in: query
        schema:
          type: array
          items:
            type: string
            enum:
            - attendees
            - attendeesCount
            - poll
      - name: running
        in: query
        schema:
          type: boolean
      - name: name
        in: query
        schema:
          type: string
      - name: loginGroupId
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 1000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/token/guest/{token}":
    get:
      operationId: getLaunchingTypeForGuestToken_1
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  "/token/invite/{token}":
    get:
      operationId: getLaunchingTypeForInvitationToken_1
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            text/plain: {}
  "/users":
    get:
      operationId: getUsers_1
      parameters:
      - name: offset
        in: query
        description: Offset of the first entry in results. E.g. If there are over
          600 results, and the request defines limit=100 and offset=500, the API returns
          results 500 through 599.
        schema:
          minimum: 0
          type: integer
          format: int32
          default: 0
      - name: fields
        in: query
        description: A subset of object attributes required in the response. The list
          must be a comma separated list of context attributes.
        schema:
          type: string
          default: ''
      - name: order
        in: query
        description: Order of results.
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: name
        in: query
        schema:
          type: string
      - name: extId
        in: query
        schema:
          type: string
      - name: id
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: ids
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: searchType
        in: query
        schema:
          type: string
          default: owned
      - name: userType
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
      - name: loginGroupId
        in: query
        schema:
          type: string
      - name: deleted
        in: query
        schema:
          type: boolean
          default: false
      - name: userRole
        in: query
        schema:
          type: integer
          format: int32
      - name: sort
        in: query
        schema:
          type: array
          items:
            type: string
            default: id
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 5000
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    post:
      operationId: postUsers_1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    patch:
      operationId: upload
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/users/{userId}":
    get:
      operationId: getUsersByUserId_1
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    put:
      operationId: putUsersByUserId_1
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      operationId: deleteUsersByUserId_1
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
    patch:
      operationId: patchUsersByUserId_1
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
          application/merge-patch+json:
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/users/me":
    get:
      operationId: getMeInformation
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/reports/auth/{reportType}/async":
    get:
      operationId: getAuthTokenAsync
      parameters:
      - name: startTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: endTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: loginGroupId
        in: query
        schema:
          type: string
      - name: reportType
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/reports/auth/{reportType}":
    get:
      operationId: getAuthTokenSync
      parameters:
      - name: startTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: endTime
        in: query
        schema:
          "$ref": "#/components/schemas/DateTimeParam"
      - name: loginGroupId
        in: query
        schema:
          type: string
      - name: reportType
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/reports/auth/poll":
    get:
      operationId: getAuthTokenPollReport
      parameters:
      - name: sessionInstanceUuid
        in: query
        required: true
        schema:
          type: string
          format: uuid
      - name: timeZone
        in: query
        schema:
          type: string
      - name: sortBy
        in: query
        schema:
          type: array
          items:
            type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
  "/reports/{uuid}":
    get:
      operationId: getReportInfo
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/User"
      responses:
        default:
          description: default response
          content:
            application/json: {}
components:
  schemas:
    CloudDataDto:
      type: object
      properties:
        siteId:
          type: string
          format: uuid
    ConsumerDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        uid:
          type: string
        consumerType:
          type: string
          enum:
          - OAUTH
          - LG
          - USER
          - CONTEXT
          - NATIVE_USER
          - LTI
          - CONTEXT_GROUP
          - SERVER
        user:
          "$ref": "#/components/schemas/UserDto"
        context:
          "$ref": "#/components/schemas/Context"
        oauthConsumerId:
          type: integer
          format: int64
        oauthConsumer:
          "$ref": "#/components/schemas/OAuthConsumerDto"
        loginGroupId:
          type: integer
          format: int64
        loginGroup:
          "$ref": "#/components/schemas/LoginGroupDto"
        parent:
          "$ref": "#/components/schemas/ConsumerDto"
        accountConsumer:
          "$ref": "#/components/schemas/ConsumerDto"
    Context:
      required:
      - name
      type: object
      properties:
        id:
          type: string
          description: Context's id.
          readOnly: true
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: Context's name.
        label:
          maxLength: 255
          minLength: 0
          type: string
          description: Context's label.
        title:
          maxLength: 255
          minLength: 0
          type: string
          description: Context's title.
        courseRoomEnabled:
          type: boolean
          description: For this context will be created endless course room session.
          default: true
        created:
          type: string
          description: Context's creation date.
          format: date-time
          readOnly: true
        modified:
          type: string
          description: Context's modification date.
          format: date-time
          readOnly: true
        extId:
          maxLength: 255
          minLength: 0
          type: string
          description: Context's external id.
    IntegrationAttendanceDto:
      type: object
      properties:
        enabled:
          type: boolean
        lateThreshold:
          minimum: 0
          type: integer
          format: int32
        absenceThreshold:
          minimum: 0
          type: integer
          format: int32
        presenceDurationThreshold:
          maximum: 1000
          minimum: 0
          type: integer
          format: int32
    LoginGroupAttributesDto:
      type: object
      properties:
        mcuTcpOnly:
          type: boolean
        saturnCloudfront:
          type: boolean
        turnGlobalAccelerator:
          type: boolean
        pspdfKitEnabled:
          type: boolean
    LoginGroupDto:
      required:
      - launchComponent
      - name
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 32
          minLength: 1
          pattern: ^[0-9A-Za-z]($|(((?=[ -~])[^<&\\"#%])*(?=[!-~])[^<&\\"#%]$))
          type: string
        description:
          maxLength: 128
          minLength: 0
          type: string
        htmlSessionSupported:
          type: boolean
        htmlSessionRecordingSupported:
          type: boolean
        htmlSessionMobileSupported:
          type: boolean
        htmlSessionContentSupported:
          type: boolean
        htmlSessionTelephonySupported:
          type: boolean
        htmlSessionPersistentPinsSupported:
          type: boolean
        bpdsSupported:
          type: boolean
        messagingStreamSupported:
          type: boolean
        userManagementSupported:
          type: boolean
        netstatsSupported:
          type: boolean
        integrationAttendanceSupported:
          type: boolean
        recordingPublicLinkAllowed:
          type: boolean
        recordingAuthLinkLevel:
          type: string
          enum:
          - SESSION_OWNER
          - INVITEE
          - LG
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        salesforceId:
          type: integer
          format: int64
        active:
          type: boolean
        htmlSessionTelephonyNumber:
          maxLength: 64
          minLength: 0
          type: string
        courseRoomEnabled:
          type: boolean
        breakoutRoomSupported:
          type: boolean
        maxSessionSize:
          type: integer
          format: int32
        largeSessionEnable:
          type: boolean
        privateChatRestrictedSupported:
          type: boolean
        asrSupported:
          type: boolean
        asrApiKey:
          type: string
        launchComponent:
          type: string
          enum:
          - sas
          - cla_flexgen
          - cla_cloud
          - cla_testing
          - ops_check
          - cla_flexgen_only
        attributes:
          "$ref": "#/components/schemas/LoginGroupAttributesDto"
    OAuthConsumerDto:
      required:
      - consumerKey
      - consumerSecret
      - name
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          maxLength: 255
          minLength: 0
          type: string
        consumerKey:
          maxLength: 64
          minLength: 0
          type: string
        consumerSecret:
          maxLength: 128
          minLength: 32
          type: string
        enabled:
          type: boolean
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        loginGroupId:
          type: string
        loginGroup:
          "$ref": "#/components/schemas/LoginGroupDto"
        type:
          type: string
          enum:
          - lti
          - rest
        settings:
          "$ref": "#/components/schemas/SettingsDto"
    SettingsDto:
      type: object
      properties:
        cloudData:
          "$ref": "#/components/schemas/CloudDataDto"
        integrationAttendance:
          "$ref": "#/components/schemas/IntegrationAttendanceDto"
    User:
      type: object
      properties:
        consumer:
          "$ref": "#/components/schemas/ConsumerDto"
        userId:
          type: integer
          format: int64
        name:
          type: string
    UserAttributesDto:
      type: object
      properties:
        extUsername:
          type: string
    UserDto:
      type: object
      properties:
        firstName:
          maxLength: 64
          minLength: 0
          type: string
        lastName:
          maxLength: 64
          minLength: 0
          type: string
        userName:
          maxLength: 64
          minLength: 0
          type: string
        displayName:
          maxLength: 64
          minLength: 0
          type: string
        oldPassword:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        email:
          type: string
        role:
          type: string
          enum:
          - sysdba
          - root
          - manager
          - administrator
          - supervisor
          - moderator
          - participant
          - none
          - lti_instructor
          - lti_student
        editingPermission:
          type: string
          enum:
          - reader
          - writer
        avatarUrl:
          type: string
          format: url
        deleted:
          type: boolean
        passwordModified:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        ltiLaunchDetails:
          type: object
          additionalProperties:
            type: object
        attributes:
          "$ref": "#/components/schemas/UserAttributesDto"
        id:
          type: string
        extId:
          type: string
        userType:
          type: string
          enum:
          - NATIVE
          - EXTERNAL
          - LTI
          - GUEST
          - TELEPHONY
        loginGroupId:
          type: string
        largeSessionEnabled:
          type: boolean
        htmlSessionSupported:
          type: boolean
        htmlSessionRecordingSupported:
          type: boolean
        htmlSessionMobileSupported:
          type: boolean
        htmlSessionContentSupported:
          type: boolean
        htmlSessionTelephonySupported:
          type: boolean
        courseRoomSupported:
          type: boolean
        privateChatRestrictedSupported:
          type: boolean
        htmlSessionPersistentPinsSupported:
          type: boolean
        reportSupported:
          type: boolean
        messagingStreamSupported:
          type: boolean
        asrSupported:
          type: boolean
        userManagementSupported:
          type: boolean
        integrationAttendance:
          "$ref": "#/components/schemas/IntegrationAttendanceDto"
        ownerId:
          type: string
    DateTimeParam:
      type: object
    Error:
      required:
      - errorKey
      type: object
      properties:
        errorKey:
          type: string
          description: Error key.
          readOnly: true
          example: bad_request
          enum:
          - invalid_json
          - bad_request
          - unauthorized
          - forbidden
          - method_not_allowed
          - resource_not_found
          - invalid_grant
          - invalid_client
          - unprocessable_entity
          - already_exist
          - internal_error
        errorMessage:
          type: string
          description: General description of the error response.
          readOnly: true
          example: The request was invalid.
        errorDetail:
          type: object
          description: Detailed error message.
          readOnly: true
        sessionId:
          type: string
          description: Session id.
          readOnly: true
        attendeeId:
          type: string
          description: Attendee id.
          readOnly: true
        token:
          type: string
          description: The JWT bearer token.
          readOnly: true
        sessionDetails:
          "$ref": "#/components/schemas/SessionDetails"
    SessionDetails:
      type: object
      properties:
        sessionName:
          type: string
        loginGroupName:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        accessTime:
          type: string
          format: date-time
        reconnectUrl:
          type: string
          format: url
        returnUrl:
          type: string
          format: url
        telephonyEnabled:
          type: boolean
        breakoutRoomEnabled:
          type: boolean
        courseRoomEnabled:
          type: boolean
        sessionCategory:
          type: string
          enum:
          - default
          - course
          - master
          - soap
        occurrenceType:
          type: string
          enum:
          - S
          - P
        nextOccurrence:
          type: string
          format: date-time
        lastOccurrence:
          type: string
          format: date-time
        maxSessionSize:
          type: integer
          format: int32
        largeSessionEnabled:
          type: boolean
        launchComponent:
          type: string
          enum:
          - sas
          - cla_flexgen
          - cla_cloud
          - cla_testing
          - ops_check
          - cla_flexgen_only
        bpdsSupported:
          type: boolean
        messagingStreamEnabled:
          type: boolean
        persistentPinsEnabled:
          type: boolean
      description: Session details.
      readOnly: true
      example:
    SearchResponse:
      type: object
      properties:
        size:
          type: integer
          description: Count of results returned in response.
          format: int64
          readOnly: true
        offset:
          type: integer
          description: Offset of the first entry in results.
          format: int32
          readOnly: true
        limit:
          type: integer
          description: Maximum number of returned results.
          format: int32
          readOnly: true
          example: 1000
        search:
          type: string
          description: Searched expression.
          readOnly: true
        name:
          type: string
          description: Expression to search for in the name of the object you are
            looking for.
          readOnly: true
        fields:
          type: string
          description: A subset of object attributes required in the response. The
            list must be a comma separated list of context attributes.
          readOnly: true
        results:
          type: array
          description: Results of a search.
          readOnly: true
          items:
            type: object
            description: Results of a search.
            readOnly: true
    ContextPatch:
      type: object
      properties:
        name:
          type: string
          description: Context's name.
        label:
          type: string
          description: Context's label.
        title:
          type: string
          description: Context's title.
    Id:
      type: object
      properties:
        id:
          type: string
          description: Object's identifier.
    RecordingCallbackData:
      required:
      - roomId
      - sessionId
      type: object
      properties:
        sessionId:
          type: integer
          format: int64
        roomId:
          type: integer
          format: int64
    LtiDeepLinkItemsDto:
      type: object
      properties:
        itemType:
          type: string
          enum:
          - session
          - recording
        ids:
          type: array
          items:
            type: string
    PasswordResetStep1Dto:
      type: object
      properties:
        userName:
          type: string
    PasswordResetStep2Dto:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
    PinsDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        pin:
          type: string
        pinType:
          type: string
          enum:
          - static
          - dynamic
        pinAccessType:
          type: string
          enum:
          - guest
          - chair
    SubtitleUploadMetadataDto:
      type: object
      properties:
        origin:
          type: string
          enum:
          - USER
          - EMBEDDED
          - ASR
        lang:
          type: string
        track:
          type: integer
          format: int64
        label:
          type: string
    BodyPart:
      type: object
      properties:
        contentDisposition:
          "$ref": "#/components/schemas/ContentDisposition"
        entity:
          type: object
        headers:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          "$ref": "#/components/schemas/MessageBodyWorkers"
        parent:
          "$ref": "#/components/schemas/MultiPart"
        providers:
          type: object
        parameterizedHeaders:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              "$ref": "#/components/schemas/ParameterizedHeader"
    ContentDisposition:
      type: object
      properties:
        type:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        fileName:
          type: string
        creationDate:
          type: string
          format: date-time
        modificationDate:
          type: string
          format: date-time
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
    FormDataBodyPart:
      type: object
      properties:
        contentDisposition:
          "$ref": "#/components/schemas/ContentDisposition"
        entity:
          type: object
        headers:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          "$ref": "#/components/schemas/MessageBodyWorkers"
        parent:
          "$ref": "#/components/schemas/MultiPart"
        providers:
          type: object
        name:
          type: string
        value:
          type: string
        formDataContentDisposition:
          "$ref": "#/components/schemas/FormDataContentDisposition"
        simple:
          type: boolean
        parameterizedHeaders:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              "$ref": "#/components/schemas/ParameterizedHeader"
    FormDataContentDisposition:
      type: object
      properties:
        type:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        fileName:
          type: string
        creationDate:
          type: string
          format: date-time
        modificationDate:
          type: string
          format: date-time
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        name:
          type: string
    MessageBodyWorkers:
      type: object
    MultiPart:
      type: object
      properties:
        contentDisposition:
          "$ref": "#/components/schemas/ContentDisposition"
        entity:
          type: object
        headers:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          "$ref": "#/components/schemas/MessageBodyWorkers"
        parent:
          "$ref": "#/components/schemas/MultiPart"
        providers:
          type: object
        bodyParts:
          type: array
          items:
            "$ref": "#/components/schemas/BodyPart"
        parameterizedHeaders:
          type: object
          properties:
            empty:
              type: boolean
          additionalProperties:
            type: array
            items:
              "$ref": "#/components/schemas/ParameterizedHeader"
    ParameterizedHeader:
      type: object
      properties:
        value:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    SubtitlesUpdateDto:
      type: object
      properties:
        enabled:
          type: boolean
        user:
          type: boolean
        asr:
          type: boolean
        original:
          type: boolean
        subtitlesEnabled:
          type: boolean
    AssetRestrictionDto:
      type: object
      properties:
        type:
          type: string
          enum:
          - TIME
          - REQUEST_COUNT
        expirationHours:
          type: integer
          format: int32
        maxRequests:
          type: integer
          format: int32
        expirationMinutes:
          type: integer
          format: int32
    AsrDto:
      type: object
      properties:
        requestedTs:
          type: string
          format: date-time
        checkedTs:
          type: string
          format: date-time
        deliveredTs:
          type: string
          format: date-time
        errorDescription:
          type: string
        updatedTs:
          type: string
          format: date-time
        fileId:
          type: integer
          format: int64
        transcriptId:
          type: integer
          format: int64
    RecordingDto:
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 64
          minLength: 0
          type: string
        sessionName:
          type: string
        mediaName:
          type: string
        sessionStartTime:
          type: string
          format: date-time
        duration:
          type: integer
          format: int64
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        publicLinkAllowed:
          type: boolean
        authLinkLevel:
          type: string
          enum:
          - SESSION_OWNER
          - INVITEE
          - LG
        restricted:
          type: boolean
        lastPlayback:
          type: string
          format: date-time
        playbackCount:
          type: integer
          format: int64
        lastDownload:
          type: string
          format: date-time
        downloadCount:
          type: integer
          format: int64
        canDownload:
          type: boolean
        editingPermission:
          type: string
          enum:
          - reader
          - writer
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        subtitlesEnabled:
          type: boolean
        preferredSubtitles:
          type: string
          enum:
          - USER
          - ASR
        userSubtitles:
          type: boolean
        embeddedSubtitles:
          type: boolean
        asrSubtitles:
          type: boolean
        asrStatus:
          type: string
          enum:
          - NONE
          - REQUESTED
          - FINISHED_OK
          - FINISHED_ERROR
          - ERROR_ACKNOWLEDGED
        asr:
          "$ref": "#/components/schemas/AsrDto"
        status:
          type: string
          enum:
          - PROCESSING
          - DONE
          - FAILED
        statusUpdateTs:
          type: string
          format: date-time
        storageSize:
          type: integer
          format: int64
          readOnly: true
    RecurrenceRule:
      required:
      - interval
      - recurrenceEndType
      - recurrenceType
      type: object
      properties:
        recurrenceType:
          type: string
          enum:
          - daily
          - weekly
          - monthly
        interval:
          type: string
          enum:
          - INT1
          - INT2
          - INT3
          - INT4
          - INT5
          - INT6
          - INT7
          - INT8
          - INT9
          - INT10
        daysOfTheWeek:
          type: array
          items:
            type: string
            enum:
            - mo
            - tu
            - we
            - th
            - fr
            - sa
            - su
        numberOfOccurrences:
          type: integer
          format: int32
        recurrenceEndType:
          type: string
          enum:
          - on_date
          - after_occurrences_count
        endDate:
          type: string
          format: date-time
    SessionDto:
      required:
      - name
      - startTime
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        boundaryTime:
          type: string
          enum:
          - NO_BOUNDARY
          - MINUTES_10
          - MINUTES_15
          - MINUTES_30
          - MINUTES_45
          - MINUTES_60
        guestUrl:
          type: string
          format: url
        moderatorUrl:
          type: string
          format: url
        allowGuest:
          type: boolean
        noEndDate:
          type: boolean
        showProfile:
          type: boolean
        participantCanUseTools:
          type: boolean
        canShareVideo:
          type: boolean
        canShareAudio:
          type: boolean
        canPostMessage:
          type: boolean
        canAnnotateWhiteboard:
          type: boolean
        mustBeSupervised:
          type: boolean
        openChair:
          type: boolean
        raiseHandOnEnter:
          type: boolean
        allowInSessionInvitees:
          type: boolean
        canDownloadRecording:
          type: boolean
        createdTimezone:
          type: string
        sessionExitUrl:
          type: string
          format: uri
        occurrenceType:
          type: string
          enum:
          - S
          - P
        occurrences:
          type: array
          items:
            "$ref": "#/components/schemas/SessionOccurrenceDto"
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        sessionCategory:
          type: string
          enum:
          - default
          - course
          - master
          - soap
        courseRoomEnabled:
          type: boolean
        ownerName:
          type: string
        extId:
          maxLength: 255
          minLength: 0
          type: string
        ltiParticipantRole:
          type: string
          enum:
          - participant
          - moderator
          - presenter
        guestRole:
          type: string
          enum:
          - participant
          - moderator
          - presenter
        privateChatRestricted:
          type: boolean
        telephonyEnabled:
          type: boolean
        telephonyPhoneNumber:
          type: string
        recurrenceRule:
          "$ref": "#/components/schemas/RecurrenceRule"
        editingPermission:
          type: string
          enum:
          - reader
          - writer
        active:
          type: boolean
        joined:
          type: boolean
        bpdsSupported:
          type: boolean
        persistentPinsEnabled:
          type: boolean
        messagingStreamEnabled:
          type: boolean
        turnGlobalAccelerator:
          type: boolean
        largeSessionEnable:
          type: boolean
        canEnableLargeSession:
          type: boolean
        anonymizeRecordings:
          type: boolean
        integrationAttendance:
          "$ref": "#/components/schemas/IntegrationAttendanceDto"
        profanityFilterEnabled:
          type: boolean
        launchComponent:
          type: string
          enum:
          - sas
          - cla_flexgen
          - cla_cloud
          - cla_testing
          - ops_check
          - cla_flexgen_only
    SessionOccurrenceDto:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        active:
          type: boolean
        id:
          type: string
        joined:
          type: boolean
    UserLaunchContext:
      type: object
      properties:
        user:
          "$ref": "#/components/schemas/UserDto"
        locale:
          type: string
        returnUrl:
          type: string
        reconnectUrl:
          type: string
        originDomain:
          type: string
        editingPermission:
          type: string
          enum:
          - reader
          - writer
        launchingRole:
          type: string
          enum:
          - participant
          - moderator
          - presenter
    SessionEnrollmentDto:
      type: object
      properties:
        id:
          type: string
        editingPermission:
          type: string
          enum:
          - reader
          - writer
        launchingRole:
          type: string
          enum:
          - participant
          - moderator
          - presenter
        userId:
          type: string
        permanentUrl:
          type: string
          format: url
    UploadedUserDto:
      type: object
      properties:
        userName:
          maxLength: 64
          minLength: 0
          type: string
        firstName:
          maxLength: 64
          minLength: 0
          type: string
        lastName:
          maxLength: 64
          minLength: 0
          type: string
        displayName:
          maxLength: 64
          minLength: 0
          type: string
        password:
          maxLength: 32
          minLength: 0
          type: string
        email:
          type: string
        role:
          pattern: "^$|[Ss]"
          type: string
        id:
          type: string
    UploadedUserErrorDto:
      required:
      - field
      - key
      type: object
      properties:
        field:
          type: string
        key:
          type: string
          enum:
          - EMPTY_VALUE
          - BAD_FORMAT
          - USERNAME_CONFLICT
          - BAD_USER_TYPE
          - USERNAME_NOT_AVAILABLE
          - PASSWORD_POLICY
          - OTHER
    UploadedUserResultDto:
      required:
      - user
      type: object
      properties:
        user:
          "$ref": "#/components/schemas/UploadedUserDto"
        changed:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            "$ref": "#/components/schemas/UploadedUserErrorDto"
    UploadedUserValidationDto:
      required:
      - ownerId
      type: object
      properties:
        ownerId:
          type: string
        users:
          type: array
          items:
            "$ref": "#/components/schemas/UploadedUserResultDto"
        created:
          type: integer
          format: int32
        updated:
          type: integer
          format: int32
        errors:
          type: integer
          format: int32
  securitySchemes:
    JwtTokenAuth:
      type: apiKey
      name: Authorization
      in: header
      bearerFormat: Bearer {token}
